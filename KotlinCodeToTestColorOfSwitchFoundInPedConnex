        fun testPixelColor() {
            // Create a UiDevice instance
            val device = UiDevice.getInstance(InstrumentationRegistry.getInstrumentation())

            // Get the coordinates (x, y) of the pixel you want to test
            val x = 100
            val y = 200
            val screenshotFilePath = "C:\\Users\\Lydia\\Desktop\\Repos\\pedconnex-android\\PedConnex\\PedConnexScreenshots\\NewBitMapImage"
            val screenshotFile = File(screenshotFilePath)

            // Take a screenshot of the current display
            device.takeScreenshot(screenshotFile)

            // Load the screenshot as a Bitmap
            val bitmap = BitmapFactory.decodeFile(screenshotFile.absolutePath)

            if (bitmap != null) {
                // Get the color of the pixel at the specified coordinates
                val pixelColor = bitmap.getPixel(x, y)

                // Define the expected color value
                val expectedColor = -0xFF1EBC4E

                // Assert that the actual pixel color matches the expected color
                assertEquals(expectedColor, pixelColor)
            }
            else {
                throw AssertionError("Failed to decode the screenshot bitmap")
            }
        }

        testPixelColor()
    }

    private fun childAtPosition(
        parentMatcher: Matcher<View>, position: Int
    ): Matcher<View> {

        return object : TypeSafeMatcher<View>() {
            override fun describeTo(description: Description) {
                description.appendText("Child at position $position in parent ")
                parentMatcher.describeTo(description)
            }

            public override fun matchesSafely(view: View): Boolean {
                val parent = view.parent
                return parent is ViewGroup && parentMatcher.matches(parent)
                        && view == parent.getChildAt(position)
            }
        }
    }
    }
