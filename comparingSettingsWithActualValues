# Important things to note: If a setting has a bool in it, I will convert that Bool from
# True to 1.0 and False to 0.0



import json
import sys
import datetime
from dateutil import parser
import boto3
import re
from boto3.dynamodb.conditions import Key, Attr


session = boto3.Session(region_name='s-s-s', 
  aws_access_key_id='', 
  aws_secret_access_key='')
dynamodb = session.resource('dynamodb') # aws_access_key_id=ACCESS_KEY_ID, aws_secret_access_key=SECRET_ACCESS_KEY)
table = dynamodb.Table('Factory')
pk_value = "NOTIFICATIONS#"

def lambda_handler(event, context):
  # Make Initial Query in the key field called lorawan where the value is equal to OR GREATER THAN the timeFourMinutesAgo 
  currentTime = getCurrentTime()

  payload = event['state']['desired']
  print("payload is ", payload)
  
  pn = getValue('pn', payload)
  sn = getValue('sn', payload)
  co = getValue('co', payload)
  
  #now we're going to get this same device from the NOTIFICATIONS# from factory table
  devicesRecord = getDeviceRecordFromFactoryTable(pn, sn, co)
  print("devices RECORD is: ", devicesRecord)
  
  print("devices devicesRecord is")
  items_per_segment = 15
  count = 0
  for key, value in devicesRecord.items():
    if count % items_per_segment == 0 and count != 0:
      print()
    print(f"{key}: {value}")
    count+=1
  
  devicesSettings = getDevicesSettings(devicesRecord)
  print("device's settings are: ", devicesSettings)
  result_matrix = []
  result_matrix = compare_dicts2(payload, devicesSettings, result_matrix)
  print(result_matrix)
  
  for row in result_matrix:
    settingToCompare = str(row[2])
    val1 = row[1]
    valComparisonName = row[0]
    comparisonOp, val2 = extract_op_and_number(settingToCompare)
    compare(valComparisonName, val1, comparisonOp, val2)
  #



def compare(valComparisonName, val1, comparisonOp, val2):
  # Check that val1 is a time. Throws none if it cannot be converted to a time.
  print("val1 is: ", val1)
  output = get_seconds_since_time(val1)
  # if output is None, that means it was not a time. Now we're testing to see if
  # it's a number or bool (it will convert bool to a number)
  if output == None:
    print("val1 is not time: ", val1)
    output = get_number(val1)
    if val2 == (True or False):
      get_number(val2) # converting bool to an integer. 1.0 if True. 0.0 if False
    print("val1 is a number or bool: ", val1)
  
  # Checking to see if it's a string. Things like versions will be processed as
  # strings. 
  if output == None:
    print("val1 is string, ", val1)
    
  

  

# Warning! This function converts a Bool of True to 1.0
def get_number(value):
    try:
        # Attempt to convert the input to a number
        number = float(value)
        return number
    except (ValueError, TypeError):
        return None



def get_seconds_since_time(input_time_string):
    if not isinstance(input_time_string, str):
        return None  # Input is not a string
    
    try:
        # Parse the input string into a datetime object
        input_datetime = datetime.datetime.strptime(input_time_string, '%Y-%m-%d %H:%M:%S %Z')

        # Get the current datetime in UTC
        current_datetime = datetime.datetime.utcnow()

        # Calculate the time difference in seconds
        time_difference = current_datetime - input_datetime
        seconds_since_time = time_difference.total_seconds()

        return seconds_since_time
    except ValueError:
        return None  # Invalid or unsupported input format



def failedFunction(input_time_string):
    if not isinstance(input_time_string, str):
        return None  # Input is not a string
    
    try:
        # Parse the input string into a datetime object
        input_datetime = datetime.datetime.strptime(input_time_string, '%Y-%m-%d %H:%M:%S %Z')
        input_datetime = pytz.utc.localize(input_datetime)  # Assume input time is in UTC

        # Get the current datetime in UTC
        current_datetime = datetime.datetime.now(pytz.utc)

        # Calculate the time difference in seconds
        time_difference = current_datetime - input_datetime
        seconds_since_time = time_difference.total_seconds()

        return seconds_since_time
    except ValueError:
        return None  # Invalid or unsupported input format



def extract_op_and_number(input_string):
    # Define a regular expression pattern to match numbers
    pattern = r'([<>!=]+)(-?\d+(\.\d+)?)'

    # Use re.search to find the pattern in the input string
    match = re.search(pattern, input_string)

    if match:
        operator = match.group(1)
        number = float(match.group(2))
        return operator, number
    else:
        return None


def compare_dicts2(dict1, dict2, result_matrix):
    keyPosition = 0
    for key in dict1:
        if key in dict2 and dict1[key] is not None and dict2[key] is not None:
            value1 = dict1[key]
            value2 = dict2[key]
            
            if isinstance(value1, dict) and isinstance(value2, dict):
                compare_dicts(value1, value2, result_matrix)  # Recursively compare nested dictionaries
            elif value1 == value2:
                print(f"Key '{key}' has the same value in both dictionaries:", value1)
            else:
                print(f"Key '{key}' has different values:")
                print(f"  Value in dict1: {value1}")
                print(f"  Value in dict2: {value2}")
                
            result_matrix.append([key, value1, value2])
            keyPosition = keyPosition + 1

    return result_matrix

# We're gonna have this return a 2D array: each value in the first dimension will represent a key value pair.
# The second dimension is the key value pair and the name of that node. Example:
# [ ["tempCpu", "33", ">=33"], ["humidity", "22.9", "<38.3"]  ]
def compare_dicts(dict1, dict2, result_matrix):
  keyPosition = 0
  for key in dict1:
    if key in dict2:
      
      value1 = dict1[key]
      value2 = dict2[key]
      
      if isinstance(value1, dict) and isinstance(value2, dict):
        compare_dicts(value1, value2, result_matrix)  # Recursively compare nested dictionaries
      elif value1 == value2:
        print(f"Key '{key}' has the same value in both dictionaries:", value1)
      else:
        print(f"Key '{key}' has different values:")
        print(f"  Value in dict1: {value1}")
        print(f"  Value in dict2: {value2}")
        
      result_matrix.append([key, value1, value2])
      keyPosition = keyPosition + 1
  
  return result_matrix
  
def addToArray(array, value1, value2):
  if value1 != None:
    array.insert(0, value1)
  if value2 != None:
    array.insert(1, value2)
  
  return array

def getDevicesSettings(dictionary):
  settings = dictionary[0]['settings']
  
  return settings

def getCurrentTime():
  currentTime = datetime.datetime.now()
  currentTime = currentTime.replace(microsecond=0)
  
  return currentTime
    

def getValue(value, payload):
  #desired_state = event['state']['desired']
  returnValue = payload[value]
    
  return returnValue
    
    
    
# returns None if empty
def getTopicArn():
  try:
    response = table.query(
      KeyConditionExpression=Key("pk").eq("NOTIFICATIONS#")
      #AttributeToGet=['pn']
    )
    items = response['Items']
    print(items)
    for item in items:
        snsArnData = item['settings']
        snsArn = item['snsarn']
        
  except Exception as e:
    print("ERROR! ", e)
    snsArn = None
    
  return snsArn


def getDeviceRecordFromFactoryTable(pn, sn, co):
  response = table.query(
    KeyConditionExpression=Key("pk").eq("NOTIFICATIONS#")
  )
  items = response['Items']
 
  print(items)
  matchingDevicesSettings = ""
  
  for item in items:
    isEqual = True
    if pn != item['pn']:
      isEqual = False
    elif sn != item['sn']:
      isEqual = False
    elif co != item['co']:
      isEqual = False
      
    if isEqual:
      matchingDevicesSettings = items
  
  return matchingDevicesSettings






def getMaxUplinkTimeFromFactoryTable():
  try:
    response = table.query(
      KeyConditionExpression=Key("pk").eq("NOTIFICATIONS#")
      #AttributeToGet=['pn']
    )
    items = response['Items']
    print(items)
    for item in items:
        lastUplinkData = item['settings']
        lorawan = lastUplinkData['lorawan']
        lastUplinkTimeout = lorawan['lastUplinkTimeoutSec']
        
        print()
        print(lastUplinkTimeout)
        lastUplinkTimeout = int(lastUplinkTimeout)
        print("last uplink timeout has a value of ", lastUplinkTimeout, " and a type of integer ", isinstance(lastUplinkTimeout, int))
        
  except Exception as e:
    print("ERROR! ", e)
    lastUplinkTimeout = None
    
  return lastUplinkTimeout
   
  
# Receives maxLastUplinkTime in minutes
def queryFactoryTableForAffinities(maxLastUplinkTime, currentTime, notifyTopicArn):
  print("maxLastUplinkTime is ", maxLastUplinkTime)

  response = table.query(
    KeyConditionExpression=Key("pk").eq("HEALTH#")
    #AttributeToGet=['pn']
  )
  
  

#Extract the Results
  items = response['Items']
  successfulLoraReads=0
  unsuccessfulLoraReads=0
  devicesOfflineFourMinutes = []
  totalDeviceCount=0
  affinitiesCount=0
  message_text=""
  for item in items:
    totalDeviceCount=totalDeviceCount+1
    
    
    try:
      pnData = item['pn']
      #print("PN: ", pnData)
      if pnData == 'KST7020':
        affinitiesCount=affinitiesCount+1
        print("")
        lorawanData = item['lorawan']
        deviceSk = item['sk']
        successfulLoraReads = successfulLoraReads + 1
      
        # seeing if each item has had an uplink in the last four minutes or not
        lastUplink = lorawanData['lastUplink']
        print("LASTUPLINK: ", lastUplink)
        lastUplink = parser.parse(lastUplink)
        naive = lastUplink.replace(tzinfo=None)
  
        minutes_diff = (currentTime - naive).total_seconds() / 60.0
        if minutes_diff > maxLastUplinkTime:
          if (successfulLoraReads is not None) and (deviceSk is not None) and (maxLastUplinkTime is not None):
            message_text = message_text + "DEVICE: " + str(deviceSk) + "\n  OFFLINE FOR  " + str(maxLastUplinkTime) + " MINUTES or more \n\n" 
            
            devicesOfflineFourMinutes.append(item['sk'])
          
          else:
            print("there was an issue with lora reads, empty device sk's, or no max last uplink time")
      
        
    except Exception as e:
      print("ERROR!", e)
      unsuccessfulLoraReads = unsuccessfulLoraReads + 1
      
  print("TOTAL NUMBER OF SUCCESSFUL LORA READS: ", successfulLoraReads)
  print("TOTAL NUMBER OF UNSUCCESSFUL LORA READS: ", unsuccessfulLoraReads)
  print("DEVICES OFFLINE FOR ", maxLastUplinkTime, " MINUTES OR MORE: ", devicesOfflineFourMinutes)
  print("NUMBER OF DEVICES OFFLINE FOR ", maxLastUplinkTime, " MINUTES OR MORE: ", len(devicesOfflineFourMinutes))
  print("NUMBER OF AFFINITIES READ: ", affinitiesCount)
  
  
  message_text = "Warning! \n\n" + message_text
  print("message_text is ", message_text)
  
  publishMessage(message_text, notifyTopicArn)


def publishMessage(message_text, notifyTopicArn):
  sns = boto3.client('sns')
  
  response = sns.publish(
    TopicArn=notifyTopicArn,
    Message=message_text
  )
  
  return response
