import json
import sys
import datetime
from dateutil import parser
import boto3
import re
from boto3.dynamodb.conditions import Key, Attr

# reference to the boto3 dynamodb resource
#key_file = '/etc/.ssh/authorized_keys'
#line_number = 0
#with open(key_file, 'r') as file:
#  for line in file:
#    print(line_number, line)
#    if line_number == 0:
#      print(line_number, line)
#      ACCESS_KEY_ID=line.replace('ACCESS_KEY_ID=', '')
#      print(line_number, "access key is ", ACCESS_KEY_ID)
#    else:
#      print(line_number, line)
#      SECRET_ACCESS_KEY=line.replace('SECRET_ACCESS_KEY=', '')
#      print("secret access key is ", SECRET_ACCESS_KEY)
#    line_number = line_number + 1
session = boto3.Session(region_name='', 
  aws_access_key_id='', 
  aws_secret_access_key='')
dynamodb = session.resource('dynamodb') #aws_access_key_id=ACCESS_KEY_ID, aws_secret_access_key=SECRET_ACCESS_KEY)
maxLastUplinkTime = 4
#lorawanIsNone = False

def main():
  table = dynamodb.Table('Factory')

  #Make Initial Query in the key field called lorawan where the value is equal to OR GREATER THAN the timeFourMinutesAgo 
  currentTime = datetime.datetime.now()
  currentTime = currentTime.replace(microsecond=0)
  print("current time is ", currentTime)
  print("")

  response = table.query(
    KeyConditionExpression=Key("pk").eq("HEALTH#")
  )
  

#Extract the Results
  items = response['Items']
  successfulLoraReads=0
  unsuccessfulLoraReads=0
  devicesOfflineFourMinutes = []
  totalDeviceCount=0
  for item in items:
    totalDeviceCount=totalDeviceCount+1
    deviceSk = item['sk']
    print(totalDeviceCount, "your device is ", deviceSk)
    
    try:
      lorawanData = item['lorawan']
      
      successfulLoraReads = successfulLoraReads + 1
      
      # seeing if each item has had an uplink in the last four minutes or not
      lastUplink = lorawanData['lastUplink']
      print(lastUplink)
      lastUplink = parser.parse(lastUplink)
      naive = lastUplink.replace(tzinfo=None)
  
      minutes_diff = (currentTime - naive).total_seconds() / 60.0
      if minutes_diff > maxLastUplinkTime:
        print("DEVICE: ", deviceSk, "\n OFFLINE FOR FOUR MINUTES or more")
        devicesOfflineFourMinutes.append(item['sk'])
      
      
    except Exception as e:
      print("ERROR!", e)
      unsuccessfulLoraReads = unsuccessfulLoraReads + 1
      
  print("TOTAL NUMBER OF SUCCESSFUL LORA READS: ", successfulLoraReads)
  print("TOTAL NUMBER OF UNSUCCESSFUL LORA READS: ", unsuccessfulLoraReads)
  print("DEVICES OFFLINE FOR FOUR MINUTES OR MORE: ", devicesOfflineFourMinutes)
  print("NUMBER OF DEVICES OFFLINE FOR FOUR MINUTES OR MORE: ", len(devicesOfflineFourMinutes))

main()
